#TODO
# cicha anomalia
# metryka

types of anomalis:
- point anomaly - data point that deviate significantly from the rest of the data
- contextual anomaly - depends on the surroundings contex, specially in  a time-series data.
- collective anomalies - a set of data points together indicate an anomaly, a few factor might means anomaly

Outliers - values that deviate significantly from the rest of the data.





Conclusions after silent anomalies researches:
In general model works properly when the outlies is much different than the original function.
So if we wanna detect even silents anomalies we have to use some enhancement

1. first of all we can apply dedicated detection for different anomaly types -
different for common reconstruction error, diffrent for frequency, phase, amplitude and so on

2. We can implement some function that can isolate some significant features in a purpose for
detection different anomalies types.
    - For TIME DOMAIN (point anomaly): Except for raw values we can use the derivatives to show
                       how function is changing
    - For FREQUENCY DOMAIN: magnitude of frequency components via Fast Fourier Transform
    - For PHASE: phase angles of frequency components
    - For AMPLITUDE (atenuation/noise): similar to time domain but we can implement amplitude envelope (obwiednia)
      or hilbert transformation


Current Challange: Metrics and implementation with explanation

#TODO
- na mszynie wirtualnej ogarnac
- dokumentacja
- dostane sql, z sql loader
- analizwoanie anomali w zaleznosci od czasu


zasymulowac rzeczywiste dane, zwykly sin, doba to okres naszej funkcji sin(x) + 1

tolerancja +- 5% (anomalia jest dobiero wtedy jak test set róznie sie wiecej niz +- 5%)

obciaznie serwera z billingcare (wykrywanie anomali w dzeidznie czasu i w zaleznosci od czasu)

system musi zestawic cpu z aktualna liczba uzytkownikow zeby wykryc czy cos moze byc anomalia

jak sprawic zeby model dziala w czasie rzeczywistym




CEL: Przetwarzanie danych w czasie rzeczywistym, aby wykrywać anomalie na bierząco

  1. Bufory danych (zamiast operować na całym y_noise, musimy utzymywać okno ostatnich seq_len punktów danych,
    kiedy pojawi się nowy punkt zostanie dodany on do bufora, a najstarszy punkt zostanie usunięty z tego bufora).
  
  2. Bierzący bufor traktujemy, jako bierzący segment do analizy.

  3. Progi detekcji anomali muszą zostać obliczone podczas treningu i zapisane wraz z modelem
    wraz z modelem i scalarem, będą on wczytywane podczas detekcji w czasie rzeczywistym.

  4. Trzeba stworzyć klasę, która będzie zawierać pojedynczy segment i zwracać status anomalii
    oraz metryki dla tego segmentu.


------------------------------------------------------------------------------------------------------------------------


# stworzenie tabel: traning_data, test_data
# traning data musza zawierac dane bez anomali, a test data dane z anomliami
# nastepnie nauka i ewaluacja takiego modelu

struktura tabeli training_data
CREATE TABLE training_data (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cpu NUMBER(5,2),
    users NUMBER,
    time_sin NUMBER(10,8),
    time_cos NUMBER(10,8)
);


pula użytkowników 100 000

| Godziny       | CPU (%) | Users        | Uwagi                                                   |
| ------------- | ------- | ------------ | ------------------------------------------------------- |
| 00:00 - 01:00 | 11 – 20 | 1500 – 4000  | spokojne godziny nocne                                  |
| 01:00 - 05:00 | 5 – 13  | 0 – 1500     | niska aktywność                                         |
| 06:00 - 08:00 | 17 – 30 | 4000 – 6000  | początek dnia, poranne logowania                        |
| 08:00 - 10:00 | 25 – 40 | 5000 – 9000  | poranny szczyt                                          |
| 10:00 - 13:00 | 35 – 55 | 7000 – 11000 | godziny pracy, spore obciążenie                         |
| 13:00 - 16:00 | 30 – 50 | 6000 – 10000 | kontynuacja aktywności, nieco stabilniej                |
| 16:00 - 18:00 | 40 – 65 | 8000 – 12000 | popołudniowy szczyt (dużo użytkowników, końcówka pracy) |
| 18:00 - 20:00 | 35 – 50 | 6000 – 9000  | wieczorna aktywność, np. logowania domowe               |
| 20:00 - 22:00 | 20 – 35 | 3000 – 7000  | schyłek dnia                                            |
| 22:00 - 00:00 | 10 – 25 | 1000 – 4000  | powolne wygaszanie aktywności                           |


teraz chce wygnerowac po 2500 przykładów na kazdy z 10 bloków godzinowych